// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MypDbContext))]
    partial class MypDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Event.Meeting", b =>
                {
                    b.Property<int>("MeetingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeetingID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<int>("MeetingOwnerID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MeetingID");

                    b.HasIndex("AddressID");

                    b.HasIndex("MeetingOwnerID");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Domain.Event.MeetingArrangement", b =>
                {
                    b.Property<int>("MeetingArrangementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeetingArrangementID"));

                    b.Property<int>("MeetingID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("MeetingArrangementID");

                    b.HasIndex("MeetingID");

                    b.HasIndex("UserID");

                    b.ToTable("MeetingArrangements");
                });

            modelBuilder.Entity("Domain.Event.MeetingPhoto", b =>
                {
                    b.Property<int>("MeetingPhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeetingPhotoID"));

                    b.Property<int>("MeetingID")
                        .HasColumnType("int");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MeetingPhotoID");

                    b.HasIndex("MeetingID");

                    b.ToTable("MeetingPhotos");
                });

            modelBuilder.Entity("Domain.Location.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.UserDomain.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserID");

                    b.HasIndex("AddressID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Event.Meeting", b =>
                {
                    b.HasOne("Domain.Location.Address", "Address")
                        .WithMany("Meetings")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.UserDomain.User", "MeetingOwner")
                        .WithMany()
                        .HasForeignKey("MeetingOwnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("MeetingOwner");
                });

            modelBuilder.Entity("Domain.Event.MeetingArrangement", b =>
                {
                    b.HasOne("Domain.Event.Meeting", "Meeting")
                        .WithMany("MeetingArrangements")
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.UserDomain.User", "User")
                        .WithMany("MeetingArrangements")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Event.MeetingPhoto", b =>
                {
                    b.HasOne("Domain.Event.Meeting", "Meeting")
                        .WithMany("MeetingPhotos")
                        .HasForeignKey("MeetingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("Domain.UserDomain.User", b =>
                {
                    b.HasOne("Domain.Location.Address", "Address")
                        .WithMany("Users")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Domain.Event.Meeting", b =>
                {
                    b.Navigation("MeetingArrangements");

                    b.Navigation("MeetingPhotos");
                });

            modelBuilder.Entity("Domain.Location.Address", b =>
                {
                    b.Navigation("Meetings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.UserDomain.User", b =>
                {
                    b.Navigation("MeetingArrangements");
                });
#pragma warning restore 612, 618
        }
    }
}
